swagger: "2.0"
info:
  version: 1.0.0
  title: myapp-typescipt
  description: My cool TypeScript app
basePath: /api/v1
tags:
  - name: Examples
    description: Simple example endpoints

consumes:
  - application/json
produces:
  - application/json

definitions:
  ExampleBody:
    type: object
    title: example
    required:
      - Title
    properties:
      Title:
        type: string
        example: no_stress
schemes:
  - https
  - http

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:
  /entities:
    get:
      security:
        - Bearer: []
      tags:
        - Entity
      description: Get all entites
      responses:
        200:
          description: A list of entities

  /par_cost_centers/{entity}:
    get:
      tags:
        - Cost Center
      security:
        - Bearer: []
      description: Get all cost centers of an entity,from 'https://esquel.sharepoint.com/sites/ead/'
      parameters:
        - name: entity
          in: path
          required: true
          description: the entity of the cost centers to retrieve
          type: integer
      responses:
        200:
          description: Returns a list of cost centers of the given entity
  /cost_centers/{entity}:
    get:
      tags:
        - Cost Center
      security:
        - Bearer: []
      description: Get all cost centers of an entity,from https://esquel.sharepoint.com/sites/ead/tts_sit/
      parameters:
        - name: entity
          in: path
          required: true
          description: the entity of the cost centers to retrieve
          type: integer
      responses:
        200:
          description: Returns a list of cost centers of the given entity
         
  /locations:
    get:   
      tags:
        - Locations
      security:
        - Bearer: []
      description:  Get all frequently used locations in travel ticketing system, such as seaports, bus stations and train stations.
      responses:
        200:  
          description: Returns a list of frequently used locations.
          
  /me:
    get:      
      tags:
        - my information
      security:
        - Bearer: []
      description:  Get myinfomation.
      responses:
        200:  
          description: Returns my infomation.
          content:
            application/json:
              schema:
                type: object
                example: '{Id:123,Title:"Guo, Qiang (Symbio) /GET/IT",UserName:""GuoQian@esquel.com",...}'

  /schedule/{modeid}/{destinationid}/{originid}:
    get:
      security:
         - Bearer: []
      tags:
        - Schedule 
      description: 'Get ferry schedule between two location.'
      parameters:
        - name: modeid
          description: the modeid of transport
          in: query
          required: true
          schema:
            type: int
            enum:
              - bus   /id
              - ferry /id
              - china railway /id
              - mtr intercity through train /id
            example: ferry
        - name: destinationid
          in: query
          required: true
          description: the id of the destination. The name should be in 
          schema:
            type: int
        - name: originid
          in: query
          required: true
          description: the id of the origin, such as `shunde port --id`
          schema:
            type: int
      responses:
        '200':
          description: Returns schedule of given transportation between two locations.
          content:
            application/json:
              schema:
                type: array
  /my_ticket_requests:
    get:
      security:
        - Bearer: []
      tags:
        - Schedule 
      description: 'Get my_ticket_requests.'
      parameters:
        - name: top
          description: return top number default 10
          in: query
          required: false
        - name: __next
          description: the next page url
          in: query
          required: false
      responses:
        200:  
          description: Returns my infomation.
          content:
            application/json:
              schema:
                type: object
                

  '/travel_ticket_requests':
    security:
        - Bearer: []
    post:
      tags:
        - Travel Ticketing System Request
      description: Create a new ferry ticket request
      requestBody:
       
        required: true
      responses:
        '200':
          description: Returns request
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        example: TTS20180604001

        
  '/travel_ticket_requests/{id}':
    get:
      security:
        - Bearer: []
      tags:
        - Travel Ticketing System Request
      description: Get request with given ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the request to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Return the request with the specified id
        '404':
          description: Example not found
    put:
      tags:
        - Travel Ticketing System Request
      description: Update request with given ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the request to update
          schema:
            type: string
      requestBody:
        content:
          application/json:
        description: request body
        required: true
      responses:
        '200':
          description: Returns request                
    delete:
      tags:
        - Travel Ticketing System Request
      description: Delete request with given ID
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the request to be deleted
          schema:
            type: string
      responses:
        '204':
          description: Request deleted

  '/spec':
    get:
      tags:
        - Specification
      responses:
        '200':
          description: Return the API specification           
  